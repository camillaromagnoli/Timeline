{"version":3,"sources":["assets/check.svg","assets/clock.svg","assets/calendar.svg","assets/money.svg","assets/place.svg","services/Api.js","services/Events.js","components/Card.js","utils/Utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Api","axios","create","baseURL","headers","Accept","getEvents","a","get","result","data","events","forEach","element","custom_data","sort","b","key","localeCompare","stores","filter","event","products","store","product","value","push","Card","props","renderTitle","className","src","calendar","alt","strDate","timestamp","Date","toLocaleDateString","clock","date","getHours","getMinutes","convertToLocalTime","place","money","total","strLabel","getTotalPrice","renderItem","items","type","map","item","index","cardHeaderStyle","backgroundColor","contentStyle","container","bubbleStyle","borderColor","title","icon","check","style","width","height","console","log","renderList","App","state","componentDidMount","setState","this","lineColor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4e134c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.c4e0b8fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/clock.4b0f830c.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.1082d5d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/money.5b362d7b.svg\";","module.exports = __webpack_public_path__ + \"static/media/place.d546ec00.svg\";","import axios from \"axios\";\r\n\r\nexport const Api = axios.create({\r\n  baseURL: \"https://storage.googleapis.com/dito-questions/\",\r\n  headers: {\r\n   Accept: \"application/json\",\r\n  }\r\n});","import {Api} from './Api'\r\nexport const getEvents = async () => {\r\n    const result = await Api.get(\"events.json\")\r\n    if(!!result.data.events) {\r\n        const events = result.data.events\r\n        events.forEach( element => {\r\n            element.custom_data.sort((a,b) => {return a.key.localeCompare(b.key)})\r\n        })\r\n        const stores = events.filter( element => {return element.event === \"comprou\"})\r\n        const products = events.filter( element => {return element.event === \"comprou-produto\"})\r\n        stores.forEach(store => {\r\n            store.products = []\r\n            products.forEach(product => {\r\n                if(product.custom_data[2].value === store.custom_data[1].value) {\r\n                    store.products.push(product)\r\n                }\r\n            })\r\n        })\r\n        return stores\r\n    }\r\n    return null\r\n}\r\n\r\n","import React from 'react'\r\nimport {TimelineEvent} from 'react-event-timeline'\r\nimport {check, money, place, calendar, clock} from '../assets/'\r\nimport {convertTimestampToDate, convertToLocalTime, getTotalPrice} from '../utils/Utils'\r\nimport './Card.css'; \r\n\r\nconst Card = props => {\r\n    const stores = props.stores\r\n    function renderTitle(store) {\r\n        return(\r\n            <div className=\"Card-title main-title\">\r\n                <img src={calendar} className=\"Card-icon\" alt=\"Data\"/>\r\n                {!!store && convertTimestampToDate(store.timestamp)}\r\n            <img src={clock} className=\"Card-icon\" alt=\"Horario\"/>\r\n                {!!store && convertToLocalTime(store.timestamp)}\r\n                <img src={place} className=\"Card-icon\" alt=\"Localização\"/>\r\n                {!!store && store.custom_data[0].value}\r\n                <img src={money} className=\"Card-icon\" alt=\"Preço total\"/>\r\n                {!!store && getTotalPrice(store.products)}\r\n            </div> \r\n        )\r\n    }\r\n    function renderItem(items, type){\r\n        return (\r\n            items.map((item, index) => {\r\n               return <p key={index} className=\"Card-type-item\">{type === \"price\" ? \"R$\" + item.custom_data[1].value + \",00\" : item.custom_data[0].value}</p>\r\n            })\r\n        )\r\n    }\r\n    function renderList(stores){\r\n        return (\r\n            stores.map((store, index) => {\r\n                return (\r\n                    <TimelineEvent key={index} cardHeaderStyle={{backgroundColor:\"#FFFFFF\"}}\r\n                    contentStyle={{backgroundColor:\"#F8F8F8\"}} container=\"card\" bubbleStyle={{borderColor:'transparent'}} title={renderTitle(store)}\r\n                    icon={<img src={check} style={{width: \"38px\", height: \"38px\"}} alt=\"Icone de verificação\"/>}>\r\n                        <div className=\"Card-title\">\r\n                            <div className=\"Card-type\">\r\n                                <p className=\"Card-type-title\">Produto</p>\r\n                                {console.log(store.products)}\r\n                                {renderItem(store.products, \"product\")}\r\n                            </div>\r\n                            <div className=\"Card-type\">\r\n                                <p className=\"Card-type-title\">Preço</p>\r\n                                {renderItem(store.products, \"price\")}\r\n                            </div>\r\n                        </div>\r\n                    </TimelineEvent>\r\n                )\r\n            })\r\n        )\r\n    }\r\n    return(\r\n        renderList(stores)\r\n    )\r\n}\r\nexport default Card","\r\n    export function convertTimestampToDate(strDate){\r\n        return new Date(strDate).toLocaleDateString()\r\n    }\r\n    export function convertToLocalTime(strDate){\r\n        const date = new Date(strDate)\r\n        return date.getHours() + \":\" + date.getMinutes()\r\n    }\r\n    export function getTotalPrice(... products){\r\n        var total = 0\r\n        products[0].forEach(product => {\r\n            total += product.custom_data[1].value\r\n        })\r\n        const strLabel = \"R$\" + total + \",00\"\r\n        return strLabel\r\n    }","import React from 'react'\nimport{Timeline} from 'react-event-timeline'\nimport {getEvents} from './services/Events'\nimport Card from './components/Card'\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    stores:[]\n  }\n  componentDidMount = async () => {\n    const stores = await getEvents()\n    if(!!stores){\n      this.setState({stores})\n    }\n  }\n  render(){\n    const {stores} = this.state\n    console.log(stores)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Timeline lineColor=\"#D5D8DF\">\n            <Card stores={stores}/>\n          </Timeline>   \n        </header>\n      </div>\n    );\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}